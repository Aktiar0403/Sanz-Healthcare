// js/finance.js - COMPREHENSIVE FINANCIAL MANAGEMENT
console.log('ðŸ’° Loading finance module...');

const db = firebase.firestore();
let financeEntries = [];
let products = [];
let currentFilters = {};
let currentSort = { field: 'date', direction: 'desc' };

// Financial Categories
const revenueCategories = [
    'Product Sales', 'Scheme Sales', 'Stockist Payments', 'Retailer Payments',
    'Consulting Fees', 'Interest Income', 'Other Revenue'
];

const expenseCategories = [
    'Supplier Purchases', 'Marketing Expenses', 'Doctor Agreements',
    'Salaries', 'Rent & Utilities', 'Transport & Delivery',
    'Office Supplies', 'Software Subscriptions', 'Maintenance',
    'Professional Fees', 'Tax Payments', 'Other Expenses'
];

// DOM Elements
const financeTableBody = document.getElementById('financeTableBody');
const totalRevenueElem = document.getElementById('totalRevenue');
const totalExpensesElem = document.getElementById('totalExpenses');
const netProfitElem = document.getElementById('netProfit');
const monthlyProfitElem = document.getElementById('monthlyProfit');

// Chart instances
let revenueExpenseChart = null;
let expenseCategoryChart = null;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    if (typeof firebase === 'undefined' || !firebase.apps.length) {
        console.error('Firebase not available');
        showErrorMessage('Firebase not loaded. Please refresh the page.');
        return;
    }
    
    console.log('Firebase available, loading financial data...');
    loadFinancialData();
    setupEventListeners();
});

// Load all financial data
async function loadFinancialData() {
    try {
        showLoadingState();
        
        // Load products
        const productsSnapshot = await db.collection('products').get();
        products = productsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
        loadProductOptions();
        
        // Load finance entries
        const financeSnapshot = await db.collection('finance')
            .orderBy('date', 'desc')
            .get();
        
        financeEntries = financeSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
        
        console.log(`Loaded ${financeEntries.length} financial entries`);
        
        // Update UI
        applyFilters();
        updateCharts();
        loadAutoGeneratedData(); // Load data from other modules
        
    } catch (error) {
        console.error('Error loading financial data:', error);
        showErrorMessage('Error loading financial data: ' + error.message);
    }
}

// Load auto-generated data from other modules
async function loadAutoGeneratedData() {
    try {
        // Load sales data from stock (scheme sales)
        const salesSnapshot = await db.collection('stock')
            .where('type', '==', 'scheme_sale')
            .get();
        
        const salesData = salesSnapshot.docs.map(doc => doc.data());
        
        // Load marketing expenses (doctor agreements)
        const marketingSnapshot = await db.collection('doctorAgreements').get();
        const marketingData = marketingSnapshot.docs.map(doc => doc.data());
        
        console.log(`Auto-loaded: ${salesData.length} sales, ${marketingData.length} marketing entries`);
        
    } catch (error) {
        console.error('Error loading auto-generated data:', error);
    }
}

// Load product options
function loadProductOptions() {
    const productSelect = document.getElementById('productSelect');
    if (!productSelect) return;
    
    productSelect.innerHTML = '<option value="">-- Select Product --</option>';
    products.forEach(product => {
        const option = document.createElement('option');
        option.value = product.id;
        option.textContent = product.name;
        productSelect.appendChild(option);
    });
}

// Show Finance Form
function showFinanceForm(type = 'Revenue') {
    document.getElementById('formTitle').textContent = `Add ${type} Entry`;
    document.getElementById('financeForm').style.display = 'block';
    document.getElementById('financeId').value = '';
    document.getElementById('entryType').value = type;
    
    // Set form type and update categories
    document.getElementById('type').value = type;
    updateFormForType();
    
    // Clear other fields
    document.getElementById('amount').value = '';
    document.getElementById('date').value = new Date().toISOString().split('T')[0];
    document.getElementById('notes').value = '';
    document.getElementById('productSelect').value = '';
}

// Update form based on selected type
function updateFormForType() {
    const type = document.getElementById('type').value;
    const categorySelect = document.getElementById('category');
    const categoryLabel = document.getElementById('categoryLabel');
    
    categorySelect.innerHTML = '';
    
    if (type === 'Revenue') {
        categoryLabel.textContent = 'Revenue Category';
        revenueCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
        });
    } else {
        categoryLabel.textContent = 'Expense Category';
        expenseCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
        });
    }
}

// Hide Finance Form
function hideFinanceForm() {
    document.getElementById('financeForm').style.display = 'none';
}

// Save Finance Entry
async function saveFinance() {
    try {
        const financeId = document.getElementById('financeId').value;
        const financeData = {
            type: document.getElementById('type').value,
            category: document.getElementById('category').value,
            productId: document.getElementById('productSelect').value || null,
            amount: parseFloat(document.getElementById('amount').value) || 0,
            date: document.getElementById('date').value,
            notes: document.getElementById('notes').value,
            updatedAt: new Date()
        };

        // Validation
        if (!financeData.category || !financeData.amount || !financeData.date) {
            alert('Please fill in all required fields');
            return;
        }

        if (financeData.amount <= 0) {
            alert('Amount must be greater than 0');
            return;
        }

        // Get product name if product is selected
        if (financeData.productId) {
            const product = products.find(p => p.id === financeData.productId);
            financeData.productName = product ? product.name : '';
        }

        if (financeId) {
            // Update existing entry
            await db.collection('finance').doc(financeId).update(financeData);
            console.log('Finance entry updated:', financeId);
            showTemporaryMessage('Finance entry updated successfully!', 'success');
        } else {
            // Add new entry
            financeData.createdAt = new Date();
            const docRef = await db.collection('finance').add(financeData);
            console.log('Finance entry added with ID:', docRef.id);
            showTemporaryMessage('Finance entry added successfully!', 'success');
        }

        hideFinanceForm();
        await loadFinancialData();
        
    } catch (error) {
        console.error('Error saving finance entry:', error);
        showTemporaryMessage('Error saving finance entry: ' + error.message, 'error');
    }
}

// Edit Finance Entry
function editFinance(id) {
    try {
        const entry = financeEntries.find(e => e.id === id);
        if (!entry) {
            alert('Finance entry not found');
            return;
        }
        
        document.getElementById('formTitle').textContent = "Edit Finance Entry";
        document.getElementById('financeForm').style.display = 'block';
        document.getElementById('financeId').value = entry.id;
        document.getElementById('entryType').value = entry.type;
        
        // Fill form with entry data
        document.getElementById('type').value = entry.type;
        updateFormForType();
        
        // Set category after categories are loaded
        setTimeout(() => {
            document.getElementById('category').value = entry.category || '';
        }, 100);
        
        document.getElementById('productSelect').value = entry.productId || '';
        document.getElementById('amount').value = entry.amount || '';
        document.getElementById('date').value = entry.date || '';
        document.getElementById('notes').value = entry.notes || '';
        
    } catch (error) {
        console.error('Error editing finance entry:', error);
        showTemporaryMessage('Error editing finance entry: ' + error.message, 'error');
    }
}

// Delete Finance Entry
async function deleteFinance(id) {
    const entry = financeEntries.find(e => e.id === id);
    if (!entry) return;
    
    const confirmation = confirm(
        `Are you sure you want to delete this ${entry.type.toLowerCase()} entry?\n\n` +
        `Category: ${entry.category}\n` +
        `Amount: â‚¹${entry.amount}\n` +
        `Date: ${entry.date}\n` +
        `This action cannot be undone!`
    );
    
    if (confirmation) {
        try {
            await db.collection('finance').doc(id).delete();
            console.log('Finance entry deleted:', id);
            showTemporaryMessage('Finance entry deleted successfully!', 'success');
            await loadFinancialData();
            
        } catch (error) {
            console.error('Error deleting finance entry:', error);
            showTemporaryMessage('Error deleting finance entry: ' + error.message, 'error');
        }
    }
}

// Render Finance Table
function renderFinanceTable(filteredEntries = financeEntries) {
    if (!financeTableBody) return;
    
    financeTableBody.innerHTML = '';

    if (filteredEntries.length === 0) {
        financeTableBody.innerHTML = `
            <tr>
                <td colspan="7" class="loading">
                    <h3>No financial entries found</h3>
                    <p>Click "Add Revenue" or "Add Expense" to create your first financial record</p>
                </td>
            </tr>
        `;
        updateSummary(filteredEntries);
        return;
    }

    let totalRevenue = 0;
    let totalExpenses = 0;
    let monthlyProfit = 0;
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();

    filteredEntries.forEach(entry => {
        const tr = document.createElement('tr');
        tr.className = entry.type === 'Revenue' ? 'revenue-row' : 'expense-row';
        
        const typeBadge = `<span class="type-badge type-${entry.type.toLowerCase()}">${entry.type}</span>`;
        
        tr.innerHTML = `
            <td>${new Date(entry.date).toLocaleDateString()}</td>
            <td>${typeBadge}</td>
            <td><strong>${entry.category}</strong></td>
            <td>${entry.productName || '-'}</td>
            <td style="font-weight: bold; color: ${entry.type === 'Revenue' ? '#4CAF50' : '#f44336'}">
                â‚¹${entry.amount.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2})}
            </td>
            <td>${entry.notes || '-'}</td>
            <td class="action-cell">
                <button class="btn edit-btn" onclick="editFinance('${entry.id}')">Edit</button>
                <button class="btn delete-btn" onclick="deleteFinance('${entry.id}')">Delete</button>
            </td>
        `;
        financeTableBody.appendChild(tr);

        // Update totals
        if (entry.type === 'Revenue') {
            totalRevenue += entry.amount;
            
            // Monthly calculation
            const entryDate = new Date(entry.date);
            if (entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear) {
                monthlyProfit += entry.amount;
            }
        } else {
            totalExpenses += entry.amount;
            
            // Monthly calculation
            const entryDate = new Date(entry.date);
            if (entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear) {
                monthlyProfit -= entry.amount;
            }
        }
    });

    updateSummary(totalRevenue, totalExpenses, monthlyProfit);
}

// Update Summary Cards
function updateSummary(totalRevenue = 0, totalExpenses = 0, monthlyProfit = 0) {
    if (totalRevenueElem) {
        totalRevenueElem.textContent = totalRevenue.toLocaleString('en-IN', {minimumFractionDigits: 2});
    }
    if (totalExpensesElem) {
        totalExpensesElem.textContent = totalExpenses.toLocaleString('en-IN', {minimumFractionDigits: 2});
    }
    if (netProfitElem) {
        const netProfit = totalRevenue - totalExpenses;
        netProfitElem.textContent = netProfit.toLocaleString('en-IN', {minimumFractionDigits: 2});
        
        // Color code net profit
        netProfitElem.parentElement.style.color = netProfit >= 0 ? '#4CAF50' : '#f44336';
    }
    if (monthlyProfitElem) {
        monthlyProfitElem.textContent = monthlyProfit.toLocaleString('en-IN', {minimumFractionDigits: 2});
        monthlyProfitElem.parentElement.style.color = monthlyProfit >= 0 ? '#4CAF50' : '#f44336';
    }
}

// Filter Functions
function toggleFilterSection() {
    const filterSection = document.getElementById('filterSection');
    filterSection.style.display = filterSection.style.display === 'none' ? 'block' : 'none';
    
    // Load filter categories
    loadFilterCategories();
}

function loadFilterCategories() {
    const categorySelect = document.getElementById('filterCategory');
    if (!categorySelect) return;
    
    categorySelect.innerHTML = '<option value="">All Categories</option>';
    
    // Combine all categories
    const allCategories = [...revenueCategories, ...expenseCategories];
    const uniqueCategories = [...new Set(allCategories)];
    
    uniqueCategories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
    });
}

function applyFilters() {
    const typeFilter = document.getElementById('filterType').value;
    const categoryFilter = document.getElementById('filterCategory').value;
    const startDateFilter = document.getElementById('filterStartDate').value;
    const endDateFilter = document.getElementById('filterEndDate').value;
    const minAmount = parseFloat(document.getElementById('filterMinAmount').value) || 0;
    const maxAmount = parseFloat(document.getElementById('filterMaxAmount').value) || Infinity;
    
    currentFilters = { typeFilter, categoryFilter, startDateFilter, endDateFilter, minAmount, maxAmount };
    
    let filtered = financeEntries;
    
    // Apply type filter
    if (typeFilter) {
        filtered = filtered.filter(entry => entry.type === typeFilter);
    }
    
    // Apply category filter
    if (categoryFilter) {
        filtered = filtered.filter(entry => entry.category === categoryFilter);
    }
    
    // Apply date range filter
    if (startDateFilter) {
        filtered = filtered.filter(entry => entry.date >= startDateFilter);
    }
    if (endDateFilter) {
        filtered = filtered.filter(entry => entry.date <= endDateFilter);
    }
    
    // Apply amount range filter
    filtered = filtered.filter(entry => entry.amount >= minAmount && entry.amount <= maxAmount);
    
    renderFinanceTable(filtered);
    updateCharts(filtered);
}

// Chart Functions
function updateCharts(filteredEntries = financeEntries) {
    updateRevenueExpenseChart(filteredEntries);
    updateExpenseCategoryChart(filteredEntries);
}

function updateRevenueExpenseChart(entries) {
    const ctx = document.getElementById('revenueExpenseChart')?.getContext('2d');
    if (!ctx) return;
    
    // Destroy existing chart
    if (revenueExpenseChart) {
        revenueExpenseChart.destroy();
    }
    
    // Calculate last 6 months data
    const last6Months = getLast6Months();
    const monthlyData = last6Months.map(month => {
        const monthEntries = entries.filter(entry => {
            const entryDate = new Date(entry.date);
            return entryDate.getMonth() === month.month && 
                   entryDate.getFullYear() === month.year;
        });
        
        const revenue = monthEntries
            .filter(entry => entry.type === 'Revenue')
            .reduce((sum, entry) => sum + entry.amount, 0);
            
        const expenses = monthEntries
            .filter(entry => entry.type === 'Expense')
            .reduce((sum, entry) => sum + entry.amount, 0);
            
        return { revenue, expenses };
    });
    
    revenueExpenseChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: last6Months.map(m => m.label),
            datasets: [
                {
                    label: 'Revenue',
                    data: monthlyData.map(m => m.revenue),
                    backgroundColor: '#4CAF50',
                    borderColor: '#45a049',
                    borderWidth: 1
                },
                {
                    label: 'Expenses',
                    data: monthlyData.map(m => m.expenses),
                    backgroundColor: '#f44336',
                    borderColor: '#d32f2f',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return 'â‚¹' + value.toLocaleString('en-IN');
                        }
                    }
                }
            }
        }
    });
}

function updateExpenseCategoryChart(entries) {
    const ctx = document.getElementById('expenseCategoryChart')?.getContext('2d');
    if (!ctx) return;
    
    // Destroy existing chart
    if (expenseCategoryChart) {
        expenseCategoryChart.destroy();
    }
    
    // Calculate expense by category
    const expenseByCategory = {};
    entries
        .filter(entry => entry.type === 'Expense')
        .forEach(entry => {
            expenseByCategory[entry.category] = (expenseByCategory[entry.category] || 0) + entry.amount;
        });
    
    const categories = Object.keys(expenseByCategory);
    const amounts = Object.values(expenseByCategory);
    
    expenseCategoryChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: categories,
            datasets: [{
                data: amounts,
                backgroundColor: [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                    '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

// Utility Functions
function getLast6Months() {
    const months = [];
    const today = new Date();
    
    for (let i = 5; i >= 0; i--) {
        const date = new Date(today.getFullYear(), today.getMonth() - i, 1);
        months.push({
            year: date.getFullYear(),
            month: date.getMonth(),
            label: date.toLocaleDateString('en-IN', { month: 'short', year: 'numeric' })
        });
    }
    
    return months;
}

function setupEventListeners() {
    // Add sorting to table headers
    document.querySelectorAll('th[data-sort]').forEach(header => {
        header.addEventListener('click', () => {
            const field = header.getAttribute('data-sort');
            sortFinanceEntries(field);
        });
    });
}

function sortFinanceEntries(field) {
    if (currentSort.field === field) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.field = field;
        currentSort.direction = 'asc';
    }
    
    const sortedEntries = [...financeEntries].sort((a, b) => {
        let aValue = a[field];
        let bValue = b[field];
        
        // Handle dates
        if (field === 'date') {
            aValue = new Date(aValue);
            bValue = new Date(bValue);
        }
        
        // Handle numbers
        if (typeof aValue === 'number') {
            return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
        }
        
        // Handle strings
        if (currentSort.direction === 'asc') {
            return (aValue || '').localeCompare(bValue || '');
        } else {
            return (bValue || '').localeCompare(aValue || '');
        }
    });
    
    renderFinanceTable(sortedEntries);
}

function generateFinancialReport() {
    // Simple report generation - in real app, this would create PDF/Excel
    const totalRevenue = financeEntries
        .filter(entry => entry.type === 'Revenue')
        .reduce((sum, entry) => sum + entry.amount, 0);
        
    const totalExpenses = financeEntries
        .filter(entry => entry.type === 'Expense')
        .reduce((sum, entry) => sum + entry.amount, 0);
    
    const report = `
Financial Report - ${new Date().toLocaleDateString()}

Total Revenue: â‚¹${totalRevenue.toLocaleString('en-IN', {minimumFractionDigits: 2})}
Total Expenses: â‚¹${totalExpenses.toLocaleString('en-IN', {minimumFractionDigits: 2})}
Net Profit: â‚¹${(totalRevenue - totalExpenses).toLocaleString('en-IN', {minimumFractionDigits: 2})}

Total Transactions: ${financeEntries.length}
Revenue Transactions: ${financeEntries.filter(e => e.type === 'Revenue').length}
Expense Transactions: ${financeEntries.filter(e => e.type === 'Expense').length}
    `;
    
    // For now, show in alert. In production, this would download a file.
    alert(report);
    console.log('Financial Report Generated:', report);
}

// UI Utility Functions
function showLoadingState() {
    if (financeTableBody) {
        financeTableBody.innerHTML = `
            <tr>
                <td colspan="7" class="loading">
                    <h3>Loading financial data...</h3>
                    <p>Please wait while we load your financial information</p>
                </td>
            </tr>
        `;
    }
}

function showErrorMessage(message) {
    if (financeTableBody) {
        financeTableBody.innerHTML = `
            <tr>
                <td colspan="7" class="error-message">
                    <h3>Error Loading Financial Data</h3>
                    <p>${message}</p>
                    <button class="btn add-btn" onclick="loadFinancialData()" style="margin-top: 10px;">Try Again</button>
                </td>
            </tr>
        `;
    }
}

function showTemporaryMessage(message, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        z-index: 1000;
        font-weight: bold;
        transition: opacity 0.3s;
    `;
    
    messageDiv.style.backgroundColor = type === 'success' ? '#28a745' : 
                                      type === 'error' ? '#dc3545' : '#17a2b8';
    messageDiv.textContent = message;
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
        messageDiv.style.opacity = '0';
        setTimeout(() => document.body.removeChild(messageDiv), 300);
    }, 3000);
}

// Make functions globally available
window.showFinanceForm = showFinanceForm;
window.hideFinanceForm = hideFinanceForm;
window.saveFinance = saveFinance;
window.editFinance = editFinance;
window.deleteFinance = deleteFinance;
window.updateFormForType = updateFormForType;
window.toggleFilterSection = toggleFilterSection;
window.applyFilters = applyFilters;
window.generateFinancialReport = generateFinancialReport;

console.log('ðŸ’° Finance module loaded successfully!');